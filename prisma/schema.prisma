// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  firstName    String
  lastName     String?
  imageUrl     String?
  passwordHash String?
  googleId     String? @unique
  githubId     Int?    @unique
  microsoftId  String? @unique

  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  accounts            Account[]

  @@map("users")
}

model PasswordResetToken {
  id     String @id @default(uuid())
  email  String @unique
  otp    String
  userId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  expiresAt DateTime

  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime

  @@unique([email])
  @@map("email_verification_tokens")
}

model Account {
  id                String           @id @default(uuid())
  userId            Int
  accessToken       String           @unique
  emailAddress      String           @unique
  name              String
  nextDeltaToken    String?
  initialSyncStatus InitialSyncState @default(Pending)
  binaryIndex       Json?

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  threads        Thread[]
  emailAddresses EmailAddress[]

  @@index([emailAddress])
  @@map("accounts")
}

model Thread {
  id              String   @id @default(uuid())
  subject         String
  lastMessageDate DateTime
  participantIds  String[]
  accountId       String
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  done            Boolean  @default(false)

  inboxStatus Boolean   @default(true)
  draftStatus Boolean   @default(false)
  sentStatus  Boolean   @default(false)
  isDeleted   Boolean   @default(false)
  isStarred   Boolean   @default(false)
  deletedAt   DateTime?

  emails Email[]

  @@index([done])
  @@index([accountId, lastMessageDate])
  @@index([accountId, inboxStatus])
  @@index([isDeleted])
  @@index([isStarred])
  @@map("threads")
}

model Email {
  id                   String                @id
  threadId             String
  thread               Thread                @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdTime          DateTime
  lastModifiedTime     DateTime
  sentAt               DateTime
  receivedAt           DateTime
  internetMessageId    String                @unique
  subject              String
  sysLabels            String[]
  keywords             String[]
  sysClassifications   String[]
  sensitivity          Sensitivity           @default(normal)
  meetingMessageMethod MeetingMessageMethod?
  from                 EmailAddress          @relation("FromEmail", fields: [fromId], references: [id])
  fromId               String
  to                   EmailAddress[]        @relation("ToEmails")
  cc                   EmailAddress[]        @relation("CcEmails")
  bcc                  EmailAddress[]        @relation("BccEmails")
  replyTo              EmailAddress[]        @relation("ReplyToEmails")
  hasAttachments       Boolean
  body                 String?
  bodySnippet          String?
  attachments          EmailAttachment[]
  inReplyTo            String?
  references           String?
  threadIndex          String?
  internetHeaders      Json[]
  nativeProperties     Json?
  folderId             String?
  omitted              String[]

  emailLabel EmailLabel @default(inbox)
  isDeleted  Boolean    @default(false)
  deletedAt  DateTime?

  @@index([threadId])
  @@index([emailLabel])
  @@index([sentAt])
  @@index([createdTime])
  @@index([fromId])
  @@index([isDeleted])
  @@map("emails")
}

model EmailAddress {
  id            String  @id @default(cuid())
  name          String?
  address       String
  raw           String?
  sentEmails    Email[] @relation("FromEmail")
  receivedTo    Email[] @relation("ToEmails")
  receivedCc    Email[] @relation("CcEmails")
  receivedBcc   Email[] @relation("BccEmails")
  replyToEmails Email[] @relation("ReplyToEmails")

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, address])
  @@index([address])
  @@map("email_addresses")
}

model EmailAttachment {
  id              String  @id @default(cuid())
  name            String
  mimeType        String
  size            Int
  inline          Boolean
  contentId       String?
  content         String?
  contentLocation String?
  Email           Email   @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId         String

  @@map("email_attachments")
}

enum InitialSyncState {
  Pending
  Completed
}

enum EmailLabel {
  inbox
  sent
  draft
  trash
}

enum Sensitivity {
  normal
  private
  personal
  confidential
}

enum MeetingMessageMethod {
  request
  reply
  cancel
  counter
  other
}
